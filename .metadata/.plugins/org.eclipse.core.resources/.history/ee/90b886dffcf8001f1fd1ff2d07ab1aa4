/*
 * LCD_SPFD5420.c
 *
 *  Created on: Feb 27, 2025
 *      Author: compro
 */
#include "stm32f4xx.h"
#include <stdio.h>
#include <string.h>
#include "bsp_tft_lcd.h"
#include "fonts.h"

#include "stm32f4xx_hal_tim.h"


#define SPFD5420_BASE       ((uint32_t)(0x60000000 | 0x00000000))
#define SPFD5420_REG		*(__IO uint16_t *)(SPFD5420_BASE)
#define SPFD5420_RAM		*(__IO uint16_t *)(SPFD5420_BASE + (1 << 19))

static void SPFD5420_SetCursor(uint16_t _usX, uint16_t _usY);
static void SPFD5420_WriteReg(__IO uint16_t _usAddr, uint16_t _usValue);

// 2025.02.27 this..
void SPFD5420_ClrScr(uint16_t _usColor)
{
    uint32_t i;
    SPFD5420_SetCursor(0, 0);
    SPFD5420_REG = 0x202;

    for (i = 0; i < g_LcdHeight * g_LcdWidth; i++)
    {
        SPFD5420_RAM = _usColor;
    }
}

static void SPFD5420_SetCursor(uint16_t _usX, uint16_t _usY)
{
    SPFD5420_WriteReg(0x0200, _usY);
    SPFD5420_WriteReg(0x0201, 399 - _usX);
}

static void SPFD5420_WriteReg(__IO uint16_t _usAddr, uint16_t _usValue)
{
    SPFD5420_REG = _usAddr;
    SPFD5420_RAM = _usValue;
}

void SPFD5420_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
{
    SPFD5420_SetCursor(_usX, _usY);

    SPFD5420_REG = 0x202;
    SPFD5420_RAM = _usColor;
}

TIM_HandleTypeDef htim8;

void SPFD5420_SetBackLight(uint8_t _bright)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	TIM_Base_InitTypeDef TIM_TimeBaseStructure = {0};
	TIM_OC_InitTypeDef TIM_OCInitStructure;
    
    __HAL_RCC_GPIOC_CLK_ENABLE();

    if (_bright == 0)
    {
    	GPIO_InitStruct.Pin = GPIO_PIN_6;
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    	GPIO_InitStruct.Pull = GPIO_NOPULL;

        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

        //HAL_TIM_Base_Stop(&htim8);
        __HAL_TIM_DISABLE(&htim8);
        return;
    }
    else if(_bright == BRIGHT_MAX)
    {
        GPIO_InitStruct.Pin = GPIO_PIN_6;
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        GPIO_InitStruct.Pull = GPIO_NOPULL;

        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);

        __HAL_TIM_DISABLE(&htim8);
        return;
    }
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;  // Alternate Function Push-Pull
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;

    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
    __HAL_RCC_TIM8_CLK_ENABLE();


    htim8.Instance = TIM8;
    htim8.Init.Period = 720 - 1;
    htim8.Init.Prescaler = 0;
    htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim8.Init.RepetitionCounter = 0;

    if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
    {
    	Error_Handler();
    }
    TIM_OC_InitTypeDef sConfigOC = {0};
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
    sConfigOC.Pulse = (htim8.Init.Period * bright) / BRIGHTMAX;

}
